# -*- coding: utf-8 -*-
"""training_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tuN-38O3vC5_-c7uBVZVwci7jsG736db
"""

import json
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow.keras as keras
import matplotlib.pyplot as plt


DATASET_PATH = "/content/drive/MyDrive/music_dataset.json"


def load_data(dataset_path):
   with open(dataset_path, "r") as fp :
      data = json.load(fp)

   # convert lists into numpy arrays
   inputs = np.array(data["mfccs"])
   targets = np.array(data["labels"])

   return inputs, targets

def plot_history(history):

   fig, axs = plt.subplots(2)

   # create accuracy subplot

   axs[0].plot(history.history["accuracy"], label="train_accuracy")
   axs[0].plot(history.history["val_accuracy"], label="test_accuracy")
   axs[0].set_ylabel("Accuracy")
   axs[0].legend(loc = "lower right")
   axs[0].set_title("Accuracy eval")

   # create error subplot

   axs[1].plot(history.history["loss"], label="train_error")
   axs[1].plot(history.history["val_loss"], label="test_error")
   axs[1].set_ylabel("error")
   axs[1].set_xlabel("epochs")
   axs[1].legend(loc = "upper right")
   axs[1].set_title("error eval")

   plt.show()

   

if __name__ == "__main__":
   
   # load data 
   inputs, targets = load_data(DATASET_PATH)

   # split the data into train and test sets
   inputs_train, inputs_test, targets_train, targets_test = train_test_split(inputs, targets, test_size = 0.3)

   # build the architechture
   model = keras.Sequential([

          # input layer
          keras.layers.Flatten(input_shape=(inputs.shape[1], inputs.shape[2])),

          # 1st hidden layer
          keras.layers.Dense(512, activation = "relu", kernel_regularizer = keras.regularizers.l2(0.001)),
          keras.layers.Dropout(0.3),

          # 2nd hidden layer
          keras.layers.Dense(256, activation = "relu", kernel_regularizer = keras.regularizers.l2(0.001)),
          keras.layers.Dropout(0.3),

          # 3rd hidden layer
          keras.layers.Dense(64, activation = "relu", kernel_regularizer = keras.regularizers.l2(0.001)),
          keras.layers.Dropout(0.3),      

          # output layer
          keras.layers.Dense(10, activation = "softmax")             
   ])

   # compile model

   optimizer = keras.optimizers.Adam(learning_rate=0.0001)
   model.compile(optimizer=optimizer, loss="sparse_categorical_crossentropy", metrics=["accuracy"])
   model.summary()

   # train your model
   history = model.fit(inputs_train, targets_train, validation_data= (inputs_test, targets_test), batch_size = 32, epochs=50 )

   plot_history(history)